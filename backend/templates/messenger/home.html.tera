<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>Login</title>  
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
  	<link href="/assets/style.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons"
      rel="stylesheet">
</head>
<body>
    <div class="fixed flex inset-0 justify-center bg-black z-[-1] bg-cover bg-center" style="background-image: url(public/background.jpg)">
        <!-- <div class="bg-gradient-to-b from-slate-700 via-gray-900 to-slate-900 absolute inset-0"></div> -->
	</div>
	<div class="flex items-center justify-center h-screen sm:p-10">
		<div id="first" class="flex flex-col max-h-full w-full bg-opacity-20 shadow-2xl shadow-black/50 backdrop-blur-sm bg-black text-white text-xs sm:text-base font-mono gap-2 sm:gap-5 p-3 sm:p-10 sm:rounded-2xl m-auto">
			<div id="messageScrollBox" class="overflow-y-auto flex-1 flex flex-col gap-2 sm:gap-5">
				{% for message in messages %}
                    {% include "messenger/message" %}
                {% endfor %}
			</div>
			<div class="flex flex-row gap-2 mt-2 sm:mt-5">
				<input class="grow hover:font-bold bg-opacity-30 shadow-lg shadow-black/50 backdrop-blur-sm bg-black p-4 hover:ring-4 ring-slate-400 rounded-md" type="text" id="inputField" placeholder="Enter a message"/>
				<button class="hover:font-bold bg-opacity-30 shadow-lg shadow-black/50 backdrop-blur-sm bg-black p-4 hover:ring-4 ring-slate-400 rounded-md" type="submit" id="enterButton">‚èé</button>
			</div>
		</div>
	</div>
    <style>
        .menu {
            visibility: hidden;
            position: absolute;
        }

        button + .menu:active,
        button:focus + .menu {
            visibility: visible;
        }
    /style>
    <script>
        let socket;
        const inputField = document.getElementById('inputField');
        const sendButton = document.getElementById('enterButton');
        const msg_container = document.getElementById('messageScrollBox');

        function setupWebSocket(protocol, ) {
            socket = new WebSocket(protocol + '://' + window.location.host + '/api/chat');

            socket.onclose = function (event) {
                if (event.code === 1015 && protocol === 'wss') {
                    console.log("failed to connect using wss; falling back to ws");
                    setupWebSocket("ws");
                    return;
                }
                // ... (other close event handling code remains unchanged)
            };

            socket.onopen = function (event) {
                console.log('Opened Websocket');
                // You can send messages here if needed
            };

            socket.onmessage = function (event) {
                console.log('Message received: ' + event.data);
                // Handle incoming messages here

                const data = JSON.parse(event.data);
                console.log("received data", data);

                insertMessage(data);
            };

            socket.onerror = function (error) {
                console.error('WebSocket error: ' + error.message);
                // Handle any errors here
            };
        }

        function sendMessage(inputValue) {
            console.log("sending to server : " + inputValue);

            if (socket && socket.readyState === WebSocket.OPEN) {
                socket.send(inputValue);
            } else {
                console.error("WebSocket connection is not open");
            }
        }

        function initialize() {
            // Remove existing event listeners to prevent duplicates
            sendButton.removeEventListener('click', sendButtonClickHandler);
            inputField.removeEventListener('keypress', inputFieldKeyPressHandler);

            // Add event listeners
            sendButton.addEventListener('click', sendButtonClickHandler);
            inputField.addEventListener('keypress', inputFieldKeyPressHandler);

            function sendButtonClickHandler() {
                console.log("send button pressed");
                sendMessage(inputField.value);
            }

            function inputFieldKeyPressHandler(event) {
                if (event.key === "Enter") {
                    console.log("enter key pressed");
                    sendMessage(inputField.value);
                }
            }
        }

        function insertMessage(data) {
			// Generate the HTML for the new child element
			const html = `<div class="user-message min-h-fit bg-opacity-30 shadow-lg shadow-black/50 backdrop-blur-sm bg-black rounded-md flex flex-row items-stretch gap-2">
    						<div class="flex shrink-0 rounded-md max-h-10 min-h-10 sm:max-h-14 sm:min-h-14 aspect-square bg-cover p-0 m-0" style="background-image: url(userdata/${data.user_name}.png)"></div>
								<div class="message-content flex flex-col">
									<div class="username-date flex flex-row gap-5 items-center">
										<div class="username text-lg">${data.user_name}</div>
										<div class="date text-xs">${data.datetime}</div>
									</div>
									<div class="message text-xs pb-2">${data.content}</div>
								</div>
							</div>`


			// Insert the new child element into the parent container
			msg_container.insertAdjacentHTML('beforeend', html);

  			msg_container.scroll({ top: msg_container.scrollHeight, behavior: 'smooth' });
		}

		function openSocket() {
			setupWebSocket('wss');
		}

		document.addEventListener('DOMContentLoaded', function () {
			openSocket();
			initialize();
		});
	</script>
</body>
</html>









